[{"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/index.js":"1","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/App.js":"2","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/reportWebVitals.js":"3","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/classes/Store.js":"4","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/classes/Client.js":"5","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Clients.jsx":"6","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Client.jsx":"7","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Popup.jsx":"8","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Search.jsx":"9","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/SearchBar.jsx":"10","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Range.jsx":"11","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Actions.jsx":"12","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/ClientSearch.jsx":"13","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Transfer.jsx":"14","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/SendEmail.jsx":"15","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Declare.jsx":"16","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/AddClient.jsx":"17","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Dashboard.jsx":"18","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Badge.jsx":"19"},{"size":638,"mtime":1610440876420,"results":"20","hashOfConfig":"21"},{"size":908,"mtime":1611234862309,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1610358783270,"results":"23","hashOfConfig":"21"},{"size":2258,"mtime":1610570244823,"results":"24","hashOfConfig":"21"},{"size":732,"mtime":1610537578691,"results":"25","hashOfConfig":"21"},{"size":2249,"mtime":1610571645509,"results":"26","hashOfConfig":"21"},{"size":988,"mtime":1610540080894,"results":"27","hashOfConfig":"21"},{"size":1961,"mtime":1610537686000,"results":"28","hashOfConfig":"21"},{"size":1191,"mtime":1610549381029,"results":"29","hashOfConfig":"21"},{"size":1529,"mtime":1610549877053,"results":"30","hashOfConfig":"21"},{"size":726,"mtime":1610572334552,"results":"31","hashOfConfig":"21"},{"size":3268,"mtime":1610616058635,"results":"32","hashOfConfig":"21"},{"size":1057,"mtime":1610576955480,"results":"33","hashOfConfig":"21"},{"size":1408,"mtime":1610655662877,"results":"34","hashOfConfig":"21"},{"size":1136,"mtime":1610655737529,"results":"35","hashOfConfig":"21"},{"size":647,"mtime":1610655817339,"results":"36","hashOfConfig":"21"},{"size":2334,"mtime":1610655538838,"results":"37","hashOfConfig":"21"},{"size":3286,"mtime":1611264814864,"results":"38","hashOfConfig":"21"},{"size":555,"mtime":1611235828594,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1s311lw",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/index.js",[],["90","91"],"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/App.js",[],"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/reportWebVitals.js",[],"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/classes/Store.js",["92","93","94"],"import { observable, makeObservable, action } from 'mobx'\nimport axios from 'axios'\nimport Client from './Client'\n\nclass Store {\n    constructor() {\n        this.clients = []\n\n        makeObservable(this, {\n            clients: observable,\n            loadAllClients: action,\n            search: action,\n            updateClient: action\n        })\n    }\n\n    loadAllClients = async (offset) => {\n        const results = await axios.get(`http://localhost:3001/clients/${offset}`)\n        // console.log(results)\n        this.clients = results.data.map(element => {\n            const name = element.name.split(' ')\n            return new Client(element.id, name[0], name[1], element.country, element.firstContact, element.email, element.sold, element.owner, true)\n        })\n    }\n\n    search = (searchStr, field) => {\n        try {\n            if(field!='firstContact'){\n                field = field.toLowerCase()\n            }\n            // console.log('field: '+field)\n            this.clients = this.clients.map(element => {\n                if (element[field] == null || element[field] =='' || !element[field].toLowerCase().includes(searchStr.toLowerCase())) {\n                    element.show = false\n                    // console.log(element[field] + ' ' + element.show)\n                    // console.log(JSON.stringify(element))\n                }else{\n                    element.show = true\n                }\n                return element\n            })\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    // updates the name, surename, and country of the client\n    updateClient = async (client) => {\n        try {\n            console.log(JSON.stringify(client))\n            const results = await axios.put(`http://localhost:3001/client`, client)\n            if (results) {\n                const index = this.clients.findIndex(element => element.id == client.id)\n                this.clients[index].name = client.name\n                this.clients[index].surname = client.surname\n                this.clients[index].country = client.country\n            } else {\n                console.log('error: client was not updated!')\n            }\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n\n}\n\nexport default Store\n","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/classes/Client.js",[],"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Clients.jsx",[],"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Client.jsx",[],"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Popup.jsx",[],"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Search.jsx",["95"],"import React, { useState } from \"react\"\n\nconst Search = function (props) {\n\n    const [searchStr, setsearchStr] = useState('')\n    const [field, setField] = useState('Name')\n\n    const handleInput = (e) => {\n        setsearchStr(e.target.value)\n    }\n\n    const handleField = (e) => {\n        setField(e.target.value)\n        search()\n    }\n\n    const search = () => {\n        if(field == 'First Contact'){\n            props.search(searchStr, 'firstContact')\n        }else{\n            props.search(searchStr, field)\n        }\n    }\n\n    return (\n        <div className='searchDiv'>\n            <input placeholder='Type...' onChange={handleInput} value={searchStr}></input>\n            <select value={field} onChange={handleField}>\n                <option value=\"Name\">Name</option>\n                <option value=\"Surname\">Surname</option>\n                <option value=\"Country\">Country</option>\n                <option value=\"First Contact\">First Contact</option>\n                <option value=\"Email\">Email</option>\n                <option value=\"Sold\">Sold</option>\n                <option value=\"Owner\">Owner</option>\n            </select>\n        </div>\n    )\n}\n\nexport default Search\n",["96","97"],"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/SearchBar.jsx",["98"],"\n\nimport React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react'\n\nclass SearchBar extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            searchStr: '',\n            field: 'Name'\n        }\n\n    }\n\n    handleInput = (e) => {\n        this.setState({searchStr: e.target.value}, this.search)\n    }\n\n    handleField = (e) => {\n        this.setState({field: e.target.value}, this.search)\n    }\n\n    search = () => {\n        if(this.state.field == 'First Contact'){\n            this.props.clientsStore.search(this.state.searchStr, 'firstContact')\n        }else{\n            this.props.clientsStore.search(this.state.searchStr, this.state.field)\n        }\n        \n    }\n\n    render() {\n        return (\n            <div className='searchDiv'>\n                <input placeholder='Type...' onChange={this.handleInput} value={this.state.searchStr}></input>\n                <select value={this.state.fieldName} onChange={this.handleField}>\n                    <option value=\"Name\">Name</option>\n                    <option value=\"Surname\">Surname</option>\n                    <option value=\"Country\">Country</option>\n                    <option value=\"First Contact\">First Contact</option>\n                    <option value=\"Email\">Email</option>\n                    <option value=\"Sold\">Sold</option>\n                    <option value=\"Owner\">Owner</option>\n                </select>\n            </div>\n        )\n    }\n}\nexport default inject(\"clientsStore\")(observer(SearchBar))","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Range.jsx",["99"],"import React, { useState } from \"react\"\n\nconst Range = (props) => {\n\n   const [offset, setOffset] = useState(props.offset)\n\n    const decreaseOffset = () => {\n        if(offset != 0){\n            // props.updateOffset(props.offset-20)\n            setOffset(offset-20, props.updateOffset(offset-20))\n        }\n    }\n\n    const incrementOffset = () => {\n        // props.updateOffset(props.offset+20)\n        setOffset(offset+20, props.updateOffset(offset+20))\n    }\n\n    return (\n        <div className='range'>\n            <button onClick={decreaseOffset}>{'<'}</button>\n            <label>{offset}-{offset + 20}</label>\n            <button onClick={incrementOffset}>{'>'}</button>\n        </div>\n    )\n}\n\nexport default Range","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Actions.jsx",["100","101","102","103","104"],"import ClientSearch from './ClientSearch'\nimport React, { Component } from 'react'\nimport Transfer from './Transfer';\nimport SendEmail from './SendEmail'\nimport axios from 'axios'\nimport SnackBar from 'my-react-snackbar';\nimport Declare from './Declare';\nimport AddClient from './AddClient'\n\n\nclass Actions extends Component {\n    constructor() {\n        super()\n        this.state = {\n            client: {\n                id: '',\n                name: '',\n                owner: ''\n            },\n            clientSelected: false,\n            ownerSelected: false,\n            emailTypeSelected: false,\n            open: false\n        }\n    }\n\n    assignClient = (client) => {\n        this.setState({\n            client: client,\n            clientSelected: true\n        })\n    }\n\n    transferOwnership = async (employee) => {\n        employee == 'Owner' ? await this.setState({\n            ownerSelected: false\n        }) : await this.setState({\n            ownerSelected: true\n        })\n\n        if (!this.state.clientSelected || !this.state.ownerSelected) {\n            this.setState({ open: true })\n\n        } else {\n            const client = {\n                id: this.state.client.id,\n                owner: employee\n            }\n            const results = await axios.put(`http://localhost:3001/client`, client)\n        }\n\n    }\n    sendEmail = async (emailType) => {\n        emailType == 'Email Type' ? await this.setState({\n            emailTypeSelected: false\n        }) : await this.setState({\n            emailTypeSelected: true\n        })\n\n        if (!this.state.clientSelected || !this.state.emailTypeSelected) {\n            this.setState({ open: true })\n\n        } else {\n            const client = {\n                id: this.state.client.id,\n                emailType: emailType\n            }\n            const results = await axios.put(`http://localhost:3001/client`, client)\n        }\n\n    }\n    declare = async () => {\n        if (!this.state.clientSelected) {\n            this.setState({ open: true })\n\n        } else {\n            const client = {\n                id: this.state.client.id,\n                sold: 1\n            }\n            const results = await axios.put(`http://localhost:3001/client`, client)\n        }\n    }\n\n    render() {\n        return (<div>\n            <label className='Title'>Update</label>\n            <ClientSearch assignClient={this.assignClient} />\n            <table>\n                <tbody>\n                    <Transfer transferOwnership={this.transferOwnership} />\n                    <SendEmail sendEmail={this.sendEmail}/>\n                    <Declare declare={this.declare}/>\n                </tbody>\n            </table>\n            <hr></hr>\n            <label className='Title'>Add Client</label>\n            <AddClient />\n            <SnackBar\n                open={this.state.open}\n                message={'Error: Please fill in all the required data!!'}\n                position='top-center'\n                type='error'\n                action={\n                    <React.Fragment>\n                        <button onClick={() => { this.setState({ open: false }) }}>X</button>\n                    </React.Fragment>\n                }\n            />\n        </div>)\n    }\n}\n\nexport default Actions","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/ClientSearch.jsx",["105"],"import React, { useState } from \"react\"\nimport axios from 'axios'\n\nconst ClientSearch = function (props) {\n\n    const [searchStr, setSearchStr] = useState('')\n\n    const [clients, setClients] = useState([])\n\n    const handleInput = async (e) => {\n        setSearchStr(e.target.value)\n        if(e.target.value == ''){\n            setClients([])\n            return\n        }\n        const results = await axios.get(`http://localhost:3001/client/${e.target.value}`)\n        // console.log(results.data)\n        setClients(results.data.map(element => {\n            return <div key={element.id} onClick={() => chooseClient(element)}>{element.name}</div>\n        }))\n    }\n\n    const chooseClient = (client) => {\n        setClients([])\n        setSearchStr(client.name)\n        props.assignClient(client)\n    }\n\n    return (\n        <div className='searchByName'>\n            <label>Client:</label>\n            <input placeholder='Client Name' value={searchStr} onChange={handleInput}></input>\n            {clients}\n        </div>)\n}\n\nexport default ClientSearch","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Transfer.jsx",["106","107"],"\nimport React, { useState, useEffect } from \"react\"\nimport axios from 'axios'\nimport Loader from 'react-loader-spinner'\n\nconst Transfer = function (props) {\n\n    const [owners, setOwners] = useState([])\n    const [employee, setEmployee] = useState('Owner')\n    const [loader, setLoader] = useState(null)\n\n    const getOwners = async () => {\n        if(owners.length == 0){\n            const results = await axios.get(`http://localhost:3001/employees`)\n            setOwners(results.data.map(element => {\n                return <option key={element.name} value={element.name}>{element.name}</option>\n            }))\n        }\n    }\n    useEffect(getOwners)\n\n    const transferOwnership = async () => {\n        setLoader(<Loader\n            type=\"Oval\"\n            color=\"#00BFFF\"\n            height={20}\n            width={20}\n        />)\n        await props.transferOwnership(employee)\n        setLoader(null)\n    }\n\n    const handleSelection = (e) => {\n        setEmployee(e.target.value)\n    }\n\n    return (<tr className='transferSection'>\n        <td><label>Transfer Ownership To:</label></td>\n        <td><select value={employee} onChange={handleSelection}>\n            <option key='owner' value='Owner'>Owner</option>\n            {owners}\n        </select></td>\n        <td><a id='transferBtn' onClick={transferOwnership}>Transfer</a></td>\n        <td>{loader}</td>\n    </tr>)\n}\n\nexport default Transfer","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/SendEmail.jsx",["108"],"\nimport React, { useState} from \"react\"\nimport Loader from 'react-loader-spinner'\n\nconst SendEmail = function (props) {\n\n    const [emailType, setEmailType] = useState('Email Type')\n    const [loader, setLoader] = useState(null)\n\n    const sendEmail = async () => {\n        setLoader(<Loader\n            type=\"Oval\"\n            color=\"#00BFFF\"\n            height={20}\n            width={20}\n        />)\n        await props.sendEmail(emailType)\n        setLoader(null)\n    }\n\n    const handleSelection = (e) => {\n        setEmailType(e.target.value)\n    }\n\n    return (<tr className='sendEmailSection'>\n        <td><label>End Email:</label></td>\n        <td><select value={emailType} onChange={handleSelection}>\n            <option key='EmailType' value='Email Type'>Email Type</option>\n            <option key='A' value='A'>A</option>\n            <option key='B' value='B'>B</option>\n            <option key='C' value='C'>C</option>\n            <option key='D' value='D'>D</option>\n        </select></td>\n        <td><a id='sendEmailBtn' onClick={sendEmail}>Send</a></td>\n        <td>{loader}</td>\n    </tr>)\n}\n\nexport default SendEmail","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Declare.jsx",["109","110"],"import Loader from 'react-loader-spinner'\nimport React, { useState, useEffect } from \"react\"\n\nconst Declare = function (props) {\n    const [loader, setLoader] = useState(null)\n\n    const declare = async () => {\n        setLoader(<Loader\n            type=\"Oval\"\n            color=\"#00BFFF\"\n            height={20}\n            width={20}\n        />)\n        await props.declare()\n        setLoader(null)\n    }\n\n    return (<tr className='sendEmailSection'>\n        <td><label>Declare Sale!</label></td>\n        <td></td>\n        <td><a id='declareBtn' onClick={declare}>Declare</a></td>\n        <td>{loader}</td>\n    </tr>)\n}\n\nexport default Declare","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/AddClient.jsx",["111"],"\nimport React, { useState } from \"react\"\nimport axios from 'axios'\nimport Loader from 'react-loader-spinner'\n\nconst AddClient = function (props) {\n\n    const [firstName, setFirstName] = useState('')\n    const [surName, setSurName] = useState('')\n    const [country, setCountry] = useState('')\n    const [owner, setOwner] = useState('')\n    const [loader, setLoader] = useState(null)\n\n    const addClient = async () => {\n        setLoader(<Loader\n            type=\"Oval\"\n            color=\"#00BFFF\"\n            height={20}\n            width={20}\n        />)\n        let date = new Date()\n        date = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDay()}`\n        const client = {\n            name: `${firstName} ${surName}`,\n            country: country,\n            owner: owner,\n            firstContact: date\n        }\n        const results = await axios.post(`http://localhost:3001/client`, client)\n        setLoader(null)\n    }\n\n    const handleFirstName = (e) => {\n        setFirstName(e.target.value)\n    }\n\n    const handleSurName = (e) => {\n        setSurName(e.target.value)\n    }\n\n    const handleCountry = (e) => {\n        setCountry(e.target.value)\n    }\n\n    const handleOwner = (e) => {\n        setOwner(e.target.value)\n    }\n\n    return (\n        <div>\n            <table id='addClient'>\n                <tbody>\n                    <tr>\n                        <td><label>First Name:</label></td>\n                        <td><input value={firstName} onChange={handleFirstName} /></td>\n                    </tr>\n                    <tr><td><label>Surame:</label></td>\n                        <td><input value={surName} onChange={handleSurName} /></td>\n                    </tr>\n                    <tr><td><label>Country:</label></td>\n                        <td><input value={country} onChange={handleCountry} /></td>\n                    </tr>\n                    <tr><td><label>Owner:</label></td>\n                        <td><input value={owner} onChange={handleOwner} /></td>\n                    </tr>\n                    <tr><td><button onClick={addClient}>Add New Client</button></td>\n                        <td>\n                            {loader}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n\n        </div>\n    )\n}\n\nexport default AddClient","/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Dashboard.jsx",["112","113","114","115"],"/Users/aseel/elevation/code/elevation-exercises/project/crm/src/components/Badge.jsx",["116","117","118"],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":28,"column":21,"nodeType":"125","messageId":"126","endLine":28,"endColumn":23},{"ruleId":"123","severity":1,"message":"127","line":33,"column":62,"nodeType":"125","messageId":"126","endLine":33,"endColumn":64},{"ruleId":"123","severity":1,"message":"127","line":53,"column":76,"nodeType":"125","messageId":"126","endLine":53,"endColumn":78},{"ruleId":"123","severity":1,"message":"127","line":18,"column":18,"nodeType":"125","messageId":"126","endLine":18,"endColumn":20},{"ruleId":"119","replacedBy":"128"},{"ruleId":"121","replacedBy":"129"},{"ruleId":"123","severity":1,"message":"127","line":26,"column":29,"nodeType":"125","messageId":"126","endLine":26,"endColumn":31},{"ruleId":"123","severity":1,"message":"124","line":8,"column":19,"nodeType":"125","messageId":"126","endLine":8,"endColumn":21},{"ruleId":"123","severity":1,"message":"127","line":35,"column":18,"nodeType":"125","messageId":"126","endLine":35,"endColumn":20},{"ruleId":"130","severity":1,"message":"131","line":49,"column":19,"nodeType":"132","messageId":"133","endLine":49,"endColumn":26},{"ruleId":"123","severity":1,"message":"127","line":54,"column":19,"nodeType":"125","messageId":"126","endLine":54,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":68,"column":19,"nodeType":"132","messageId":"133","endLine":68,"endColumn":26},{"ruleId":"130","severity":1,"message":"131","line":81,"column":19,"nodeType":"132","messageId":"133","endLine":81,"endColumn":26},{"ruleId":"123","severity":1,"message":"127","line":12,"column":27,"nodeType":"125","messageId":"126","endLine":12,"endColumn":29},{"ruleId":"123","severity":1,"message":"127","line":13,"column":26,"nodeType":"125","messageId":"126","endLine":13,"endColumn":28},{"ruleId":"134","severity":1,"message":"135","line":43,"column":13,"nodeType":"136","endLine":43,"endColumn":61},{"ruleId":"134","severity":1,"message":"135","line":34,"column":13,"nodeType":"136","endLine":34,"endColumn":54},{"ruleId":"130","severity":1,"message":"137","line":2,"column":27,"nodeType":"132","messageId":"133","endLine":2,"endColumn":36},{"ruleId":"134","severity":1,"message":"135","line":21,"column":13,"nodeType":"136","endLine":21,"endColumn":50},{"ruleId":"130","severity":1,"message":"131","line":29,"column":15,"nodeType":"132","messageId":"133","endLine":29,"endColumn":22},{"ruleId":"123","severity":1,"message":"124","line":59,"column":36,"nodeType":"125","messageId":"126","endLine":59,"endColumn":38},{"ruleId":"123","severity":1,"message":"124","line":62,"column":33,"nodeType":"125","messageId":"126","endLine":62,"endColumn":35},{"ruleId":"123","severity":1,"message":"124","line":65,"column":41,"nodeType":"125","messageId":"126","endLine":65,"endColumn":43},{"ruleId":"123","severity":1,"message":"124","line":68,"column":37,"nodeType":"125","messageId":"126","endLine":68,"endColumn":39},{"ruleId":"130","severity":1,"message":"138","line":3,"column":17,"nodeType":"132","messageId":"133","endLine":3,"endColumn":25},{"ruleId":"130","severity":1,"message":"139","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":13},{"ruleId":"140","severity":1,"message":"141","line":12,"column":21,"nodeType":"136","endLine":12,"endColumn":63},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",["142"],["143"],"no-unused-vars","'results' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'axios' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]